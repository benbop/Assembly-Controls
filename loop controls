IDEAL
MODEL small
STACK 100h
DATASEG
; --------------------------

Y dw 100
X dw 100
Board dw 200
TIME_AUX DB 0
PressFlag db 0
; --------------------------
CODESEG
	
PROC CLEAR_SCREEN              ;clear the screen by restarting the video mode
    MOV AH,00h                   ;set the configuration to video mode
    MOV AL,13h                   ;choose the video mode
    INT 10h    					 ;execute the configuration 
    
    MOV AH,0Bh 					 ;set the configuration
    MOV BH,00h 					 ;to the background color
    MOV BL,00h 					 ;choose black as background color
    INT 10h    					 ;execute the configuration
    
    RET
ENDP CLEAR_SCREEN

PROC moves
    MOV AH, 01h       ; Function 01h - Check for Key Press
    INT 16h
    JZ exit_moves     ; Jump if ZF is set (no key pressed)

    MOV AH, 00h       ; Function 00h - Read Key Stroke
    INT 16h

    ; Check if AH contains 'W' (ASCII value 87)
    CMP AL, 87
    call w_pressed
    ; Check if AH contains 'S' (ASCII value 83)
    CMP AL, 83
    call s_pressed
    ; Check if AH contains 'D' (ASCII value 68)
    CMP AL, 68
    call d_pressed
    ; Check if AH contains 'A' (ASCII value 65)
    CMP AL, 65
    call a_pressed
    ; Check if AH contains '1B' (Escape key)
    CMP AL, 27h
    JE exit_moves

exit_moves:
    RET

ENDP moves
PROC w_pressed
    SUB [Y], 1

    CHECK_TIME1:         ;time checking loop
    MOV AH,2Ch 					 ;get the system time
    INT 21h 			 ;is the current time equal to the previous one(TIME_AUX)?
    CMP DL,[TIME_AUX] 			 ;is the current time equal to the previous one(TIME_AUX)?

    JE CHECK_TIME1
    MOV [TIME_AUX],DL 

    CALL draw_player
    JMP w_pressed
	RET
ENDP w_pressed

PROC d_pressed
    ADD [X], 1

    CHECK_TIME2:          ;time checking loop
    MOV AH,2Ch 					 ;get the system time
    INT 21h 			 ;is the current time equal to the previous one(TIME_AUX)?
    CMP DL,[TIME_AUX] 			 ;is the current time equal to the previous one(TIME_AUX)?

    JE CHECK_TIME2
    MOV [TIME_AUX],DL 

    CALL draw_player
    JMP d_pressed
	ret
ENDP d_pressed

PROC a_pressed
    SUB [X], 1

    CHECK_TIME3:           ;time checking loop
    MOV AH,2Ch 					 ;get the system time
    INT 21h 			 ;is the current time equal to the previous one(TIME_AUX)?
    CMP DL,[TIME_AUX] 			 ;is the current time equal to the previous one(TIME_AUX)?

    JE CHECK_TIME3
    MOV [TIME_AUX],DL 

    CALL draw_player
    JMP a_pressed
	ret
ENDP a_pressed

PROC s_pressed
    ADD [Y], 1
    JMP exit_moves
ENDP s_pressed

PROC draw_player
    MOV AX, 13h
    INT 10h
    
    MOV AX, 0C07h     ; Function 0Ch, Set Pixel Color
    MOV BH, 0         ; Page number (usually 0 in mode 13h)
    
    MOV CX, [X]       ; X-coordinate
    MOV DX, [Y]       ; Y-coordinate
    MOV SI, 0
    MOV DI, 0
    MOV AL, 2; Color green
    
    draw_row_loop:
        draw_pixel_loop:
            INC CX
            INC DI
            
            INT 10h
            CMP DI, 16
            JNE draw_pixel_loop
            
            SUB CX, 16
            MOV DI, 0
            INC DX
            INC SI
            
            CMP SI, 2
            JNE draw_row_loop
    
    RET
ENDP draw_player

PROC draw_ground
    MOV AX, 13h
    INT 10h
    
    MOV AX, 0C07h     ; Function 0Ch, Set Pixel Color
    MOV BH, 0         ; Page number (usually 0 in mode 13h)
    
    MOV CX, 0       ; X-coordinate
    MOV DX, 10       ; Y-coordinate
    MOV SI, 0
    MOV DI, 0
    MOV AL, 15; Color white
    
    loopy:
        INC CX
        INT 10h
        CMP CX, 320
        JNE loopy
    
    RET
ENDP draw_ground

MOV AX, 13h
INT 10h ; Set video mode 13h (320x200 pixels, 256 colors)

start:
    MOV AX, @data
    MOV DS, AX

    MOV AX, 13h
    INT 10h ; Set video mode 13h (320x200 pixels, 256 colors)

    game_loop:
        CHECK_TIME:                      ;time checking loop
            MOV AH, 2Ch 					 ;get the system time
            INT 21h 			 ;is the current time equal to the previous one(TIME_AUX)?
            CMP DL, [TIME_AUX] 			 ;is the current time equal to the previous one(TIME_AUX)?
            CALL moves
            
            JE CHECK_TIME   		     ;if it is the same, check again
            
            ; If it reaches this point, it's because the time has passed
            MOV [TIME_AUX], DL              ;update time
            
            CALL CLEAR_SCREEN
            CALL draw_player
    
    JMP game_loop

exit:
    MOV AX, 4C00h
    INT 21h

END start
